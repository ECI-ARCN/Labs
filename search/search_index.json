{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hands On Labs ECI - ARCN","text":"<p>P\u00e1gina en la que se alojaran los laboratorios correspondientes al m\u00f3dulo de ARCN, de la maestr\u00eda en inform\u00e1tica de la Escuela Colombiana de Ingenier\u00eda.</p>"},{"location":"bdd-part1/","title":"Laboratorio de BDD con Selenium, ChromeDriver y Java en GitHub Codespaces","text":""},{"location":"bdd-part1/#1-crear-un-nuevo-repositorio-en-github","title":"1. Crear un nuevo repositorio en GitHub","text":"<ul> <li>Ve a GitHub y crea un nuevo repositorio.</li> <li>Dale un nombre y una descripci\u00f3n a tu repositorio.</li> </ul>"},{"location":"bdd-part1/#2-configurar-github-codespaces","title":"2. Configurar GitHub Codespaces","text":"<ul> <li>Crear un nuevo archivo</li> <li>En nombre de archivo ingresar \".devcontainer/devcontainer.json\"</li> <li>Pegar la siguiente configuraci\u00f3n</li> </ul> <pre><code>{\n  \"name\": \"BDD Lab with Selenium and Java\",\n  \"image\": \"mcr.microsoft.com/devcontainers/java:17\",\n  \"settings\": {\n    \"terminal.integrated.shell.linux\": \"/bin/bash\"\n  },\n  \"features\": {\n    \"ghcr.io/devcontainers/features/java:1\": {\n      \"version\": \"17\"\n    },\n    \"ghcr.io/devcontainers-extra/features/maven-sdkman:2\": {},\n    \"ghcr.io/devcontainers/features/node:1\": {\n      \"version\": \"lts\"\n    },\n    \"ghcr.io/kreemer/features/chrometesting:1\": {}\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"vscjava.vscode-java-pack\",\n        \"vscjava.vscode-maven\",\n        \"dbaeumer.vscode-eslint\",\n        \"ms-python.python\",\n        \"ms-python.vscode-pylance\"\n      ]\n    }\n  },\n  \"forwardPorts\": [8080],\n  \"portsAttributes\": {\n    \"8080\": {\n      \"label\": \"Application\",\n      \"onAutoForward\": \"notify\"\n    }\n  },\n  \"postCreateCommand\": \"sudo apt update\",\n  \"remoteUser\": \"vscode\"\n}\n</code></pre> <ul> <li>Confirmar los cambios \"Commit changes...\"</li> <li>Agrega un comentario y \"Commit changes\"</li> </ul>"},{"location":"bdd-part1/#3-crear-codespace","title":"3. Crear Codespace","text":"<ul> <li>Volver a la carpeta base de tu repositorio haciendo click en \"&lt;&gt; Code\" ubicado en la parte superior izquierda.</li> <li>Hacer click en el bot\u00f3n &lt;&gt; code, pesta\u00f1a Codespaces y click en Create codespace on main.</li> </ul>"},{"location":"bdd-part1/#4-creacion-del-proyecto-maven","title":"4. Creaci\u00f3n del Proyecto Maven","text":"<p>Para desarrollar el laboratorio, primero debemos crear un proyecto Maven. Ejecuta el siguiente comando, reemplazando las variables -DgroupId y -DartifactId:</p> <pre><code>mvn archetype:generate -DgroupId={com.eci.myproject} -DartifactId={bdd-java} -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre> <p>Este comando generar\u00e1 la estructura b\u00e1sica del proyecto con las carpetas <code>src/main/java</code> y <code>src/test/java</code>.</p>"},{"location":"bdd-part1/#4-agregar-dependencias-de-selenium-y-cucumber","title":"4. Agregar dependencias de Selenium y Cucumber","text":"<ul> <li>Crea un archivo <code>pom.xml</code> en la ra\u00edz de tu proyecto y agrega las dependencias necesarias para Selenium, ChromeDriver y Cucumber:</li> </ul> <pre><code>  &lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;org.seleniumhq.selenium&lt;/groupId&gt;\n        &lt;artifactId&gt;selenium-java&lt;/artifactId&gt;\n        &lt;version&gt;4.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;!-- Cucumber --&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.cucumber&lt;/groupId&gt;\n        &lt;artifactId&gt;cucumber-java&lt;/artifactId&gt;\n        &lt;version&gt;7.0.0&lt;/version&gt;\n    &lt;/dependency&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;io.cucumber&lt;/groupId&gt;\n        &lt;artifactId&gt;cucumber-junit&lt;/artifactId&gt;\n        &lt;version&gt;7.0.0&lt;/version&gt;\n        &lt;scope&gt;test&lt;/scope&gt;\n    &lt;/dependency&gt;\n  &lt;/dependencies&gt;\n</code></pre>"},{"location":"bdd-part1/#5-crear-la-estructura-bdd","title":"5. Crear la estructura BDD","text":"<ul> <li>Dentro de la carpeta src/test/java, generar las siguientes carpetas:<ul> <li>features</li> <li>steps</li> <li>runners</li> </ul> </li> </ul>"},{"location":"bdd-part1/#6-crear-escenario-bdd","title":"6. Crear escenario BDD","text":"<ul> <li>Dentro de la carpeta features, crear un archivo con el nombre \"google_search.feature\"</li> <li>Agregar el siguiente texto</li> </ul> <pre><code>Feature: Google Search\n\n  Scenario: Search for a term\n    Given I am on the Google search page\n    When I search for \"GitHub\"\n    Then I should see \"GitHub\" in the results\n</code></pre> <ul> <li>Dentro de la carpeta steps, crear el archivo SearchSteps.java</li> <li>Pegar el siguiente c\u00f3digo</li> </ul> <pre><code>import io.cucumber.java.After;\nimport io.cucumber.java.Before;\nimport io.cucumber.java.en.Given;\nimport io.cucumber.java.en.Then;\nimport io.cucumber.java.en.When;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.openqa.selenium.chrome.ChromeOptions;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.util.concurrent.TimeUnit;\n\npublic class SearchSteps {\n    private WebDriver driver;\n\n    @Before\n    public void setUp() {\n        try {\n            System.setProperty(\"webdriver.chrome.driver\", \"/usr/local/bin/chromedriver\");\n            ChromeOptions options = new ChromeOptions();\n            options.addArguments(\"--headless\");\n            options.addArguments(\"--disable-gpu\");\n            options.addArguments(\"--no-sandbox\");\n            options.addArguments(\"--disable-dev-shm-usage\");\n            options.addArguments(\"--remote-allow-origins=*\");\n            driver = new ChromeDriver(options);\n            driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new RuntimeException(\"Failed to initialize ChromeDriver\", e);\n        }\n    }\n\n    @Given(\"I am on the Google search page\")\n    public void i_am_on_the_google_search_page() {\n        driver.get(\"https://www.google.com\");\n    }\n\n    @When(\"I search for {string}\")\n    public void i_search_for(String term) {\n        WebElement searchBox = driver.findElement(By.name(\"q\"));\n        searchBox.sendKeys(term);\n        searchBox.submit();\n    }\n\n    @Then(\"I should see {string} in the results\")\n    public void i_should_see_in_the_results(String term) {\n        assert driver.getPageSource().contains(term);\n    }\n\n    @After\n    public void tearDown() {\n        driver.quit();\n    }\n}\n</code></pre> <ul> <li>Dentro de la carpeta runners, crear el archivo TestRunner.java</li> <li>Pegar el siguiente c\u00f3digo</li> </ul> <pre><code>import org.junit.runner.RunWith;\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\n\n\n@RunWith(Cucumber.class)\n@CucumberOptions(features = \"src/test/java/features\", glue=\"steps\",\nmonochrome = true,\npublish = true,\nplugin = {\"pretty\", \"junit:target/JUnitReports/report.xml\",\n        \"json:target/JSonReports/report.json\",\n        \"html:target/HtmlReports/report.html\"\n        }\n)\npublic class TestRunner {\n}\n</code></pre> <ul> <li>ejecutar los escenarios con </li> </ul> <pre><code>mvn test\n</code></pre> <ul> <li>validar el reporte html, descargando el archivo \"target/HtmlReports/report.html\"</li> </ul>"},{"location":"bdd-part2/","title":"Laboratorio de BDD parte 2 - Patr\u00f3n Pagefactory","text":""},{"location":"bdd-part2/#challenge","title":"Challenge!!","text":"<p>De acuerdo al ejemplo de Pagefactory dado en el repositorio bdd-selenium-lab, implementar un nuevo feature utilizando algunos ejemplos de la pagina de test del sitio The Internet</p> <p>Buena Suerte y Happy Coding \ud83e\udd18 \ud83e\udd18</p>"},{"location":"ddd/","title":"Taller de Event Storming: Ejemplo - Tienda en L\u00ednea","text":""},{"location":"ddd/#1-introduccion","title":"1. Introducci\u00f3n","text":"<p>Event Storming es una t\u00e9cnica de modelado colaborativo para entender y dise\u00f1ar sistemas a partir de eventos del dominio. En este ejemplo, modelaremos una tienda en l\u00ednea desde la selecci\u00f3n de productos hasta la entrega del pedido.</p>"},{"location":"ddd/#2-eventos-del-dominio","title":"2. Eventos del Dominio","text":"<p>Los eventos representan cosas que suceden en el sistema y se escriben en pasado.</p> Producto Agregado al Carrito Pedido Creado Pago Procesado Pedido Enviado Pedido Entregado"},{"location":"ddd/#3-actores-y-comandos","title":"3. Actores y Comandos","text":"<p>Los actores son quienes interact\u00faan con el sistema y los comandos representan acciones que desencadenan eventos.</p> Cliente Agregar Producto al Carrito Cliente Crear Pedido Sistema de Pagos Procesar Pago Sistema de Env\u00edos Enviar Pedido Cliente Confirmar Entrega"},{"location":"ddd/#4-agregados-y-politicas","title":"4. Agregados y Pol\u00edticas","text":"<p>Los agregados representan unidades l\u00f3gicas del sistema, mientras que las pol\u00edticas definen reglas de negocio.</p> Carrito de Compras Verificar Stock Antes de Confirmar Pedido Pedido Validar M\u00e9todo de Pago Antes de Procesarlo Pedido Notificar al Cliente sobre el Estado del Pedido"},{"location":"ddd/#5-problemas-identificados","title":"5. Problemas Identificados","text":"<p>Durante el taller, pueden surgir dudas o problemas que necesitan ser resueltos.</p> \u00bfQu\u00e9 sucede si el pago es rechazado? \u00bfC\u00f3mo manejamos productos sin stock? \u00bfC\u00f3mo gestionamos devoluciones?"},{"location":"ddd/#6-refinamiento-y-modelado-del-dominio","title":"6. Refinamiento y Modelado del Dominio","text":"<p>Bas\u00e1ndonos en los eventos, podemos identificar bounded contexts dentro de la arquitectura del sistema.</p> Carrito de Compras Procesamiento de Pedidos Env\u00edos"},{"location":"ddd/#7-conclusion","title":"7. Conclusi\u00f3n","text":"<p>Este Event Storming nos permite visualizar el flujo de eventos y mejorar la colaboraci\u00f3n entre equipos t\u00e9cnicos y de negocio, asegurando una mejor comprensi\u00f3n del dominio.</p> <p>\ud83d\ude80 \u00a1Ahora est\u00e1s listo para aplicar Event Storming en tus proyectos!</p>"},{"location":"ddd/#taller-caso-de-negocio","title":"Taller caso de negocio","text":"<p>Reunete con tu grupo y plantea el event storming en el tablero de la clase ARCN - 2025-1, con el caso de negocio (Dominio) seleccionado y realiza las siguientes actividades:</p> <ol> <li>Ejecuta el ciclo propuesto en ddd-practitioners</li> <li>Importante manejar colores en lo posible est\u00e1ndares del event storming.</li> <li>Agregar lenguaje ubicuo y modelo de datos.</li> <li>Mostrar c\u00f3mo se hace el ejercicio fase a fase y al final entregar un blue print del modelo de dominio completo.</li> <li>En qu\u00e9 fase del proyecto se deber\u00eda ejecutar este workshop y quienes consideran que deber\u00edan participar?</li> <li>Proponer como realizar\u00edan este evento si su rol es el de coach facilitador.</li> </ol>"},{"location":"event-driven-lab/","title":"Laboratorio: Creaci\u00f3n de Microservicios con Spring Boot, RabbitMQ, Docker y Play With Docker","text":"<p>Objetivo: Crear dos servicios Spring Boot (Productor y Consumidor) que se comuniquen a trav\u00e9s de RabbitMQ, todo orquestado con Docker Compose para facilitar las pruebas en Play With Docker.</p> <p>Estructura del Repositorio (Ejemplo):</p> <pre><code>event-driven-lab/\n\u251c\u2500\u2500 producer-service/         # Servicio Productor Spring Boot\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 pom.xml\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 consumer-service/         # Servicio Consumidor Spring Boot\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 pom.xml\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 .devcontainer/            # Configuraci\u00f3n para Codespaces\n\u2502   \u2514\u2500\u2500 devcontainer.json\n\u251c\u2500\u2500 docker-compose.yml        # Orquestaci\u00f3n para Play with Docker\n\u2514\u2500\u2500 README.md                 # Instrucciones\n</code></pre>"},{"location":"event-driven-lab/#paso-1-configurar-github-codespaces","title":"Paso 1: Configurar GitHub Codespaces","text":"<ol> <li> <p>Crea un Repositorio en GitHub: Crea un nuevo repositorio p\u00fablico o privado llamado <code>event-driven-lab</code> (o el nombre que prefieras).</p> </li> <li> <p>A\u00f1ade la Configuraci\u00f3n de .devcontainer:</p> </li> <li>Dentro de tu repositorio, crea una carpeta .devcontainer.</li> <li>Dentro de .devcontainer, crea un archivo devcontainer.json con el siguiente contenido:</li> </ol> <pre><code>{\n    \"name\": \"Java Spring Event Lab\",\n    // Usa una imagen base con Java y Maven preinstalados.\n    // Puedes ajustar la versi\u00f3n de Java (e.g., :11, :17, :21)\n    \"image\": \"mcr.microsoft.com/devcontainers/java:0-17\",\n\n    \"features\": {\n        // Incluye Docker-in-Docker para poder construir im\u00e1genes dentro de Codespaces si es necesario\n        // Aunque el despliegue final es en Play with Docker, puede ser \u00fatil para pruebas locales.\n        \"ghcr.io/devcontainers/features/docker-in-docker:2\": {},\n        // A\u00f1ade expl\u00edcitamente la feature de Maven\n        \"ghcr.io/devcontainers/features/java:1\": {\n          \"version\": \"none\",\n          \"installMaven\": \"true\",\n          \"mavenVersion\": \"3.8.6\",\n          \"installGradle\": \"false\"\n        }\n    },\n\n    // Puertos a exponer desde Codespaces (\u00fatil para pruebas locales)\n    \"forwardPorts\": [\n        8080, // Puerto del productor\n        8081, // Puerto del consumidor (si tuviera API REST)\n        15672, // RabbitMQ Management UI\n        5672  // RabbitMQ AMQP Port\n    ],\n\n    // Extensiones de VS Code recomendadas\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"vscjava.vscode-java-pack\",\n                \"vmware.vscode-spring-boot\",\n                \"pivotal.vscode-spring-boot\",\n                \"ms-azuretools.vscode-docker\",\n                \"redhat.java\",\n                \"pivotal.vscode-boot-dev-pack\",\n                \"vmware.vscode-boot-dev-pack\"\n            ]\n        }\n    },\n\n    // Comando a ejecutar despu\u00e9s de crear el contenedor (opcional, ej: instalar algo)\n    // \"postCreateCommand\": \"mvn --version\",\n\n    // Configura el usuario remoto\n    \"remoteUser\": \"vscode\"\n}\n</code></pre> <ol> <li>Inicia Codespaces: Ve a tu repositorio en GitHub, haz clic en el bot\u00f3n &lt;&gt; Code, selecciona la pesta\u00f1a \"Codespaces\" y haz clic en \"Create codespace on main\". GitHub preparar\u00e1 tu entorno de desarrollo basado en devcontainer.json.</li> </ol>"},{"location":"event-driven-lab/#paso-2-crear-el-servicio-productor-spring-boot","title":"Paso 2: Crear el Servicio Productor (Spring Boot)","text":"<ol> <li> <p>Navega a la Carpeta Ra\u00edz en Codespaces: Aseg\u00farate de estar en /workspaces/event-driven-lab en la terminal de Codespaces.</p> </li> <li> <p>Crea el Proyecto Productor: Puedes usar Spring Initializr (start.spring.io) o el asistente de VS Code.</p> </li> <li>Dependencias:<ul> <li>Spring Web (para crear un endpoint REST para enviar mensajes)</li> <li>Spring for RabbitMQ (AMQP)</li> <li>Lombok (opcional, para reducir c\u00f3digo boilerplate)</li> <li>Nombre del Artefacto: producer-service</li> <li>Grupo: com.eci.arcn</li> <li>Empaquetado: Jar</li> <li>Versi\u00f3n de Java: 17</li> </ul> </li> <li>Configura application.properties:</li> </ol> <p>spring.application.name=producer-service</p> <pre><code># producer-service/src/main/resources/application.properties\nserver.port=8080\n\n# Configuraci\u00f3n de RabbitMQ\n# El host ser\u00e1 'rabbitmq' cuando se ejecute en Docker Compose\n# Para pruebas locales en Codespaces (si corres RabbitMQ localmente), usa 'localhost'\nspring.rabbitmq.host=rabbitmq\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=guest\nspring.rabbitmq.password=guest\n\n# Nombre de la cola y exchange (puedes centralizar esto)\napp.rabbitmq.exchange=messages.exchange\napp.rabbitmq.queue=messages.queue\napp.rabbitmq.routingkey=messages.routingkey\n</code></pre> <ol> <li>Configura RabbitMQ (Exchange, Queue, Binding):</li> </ol> <pre><code>package com.eci.arcn.producer_service.config;\n\nimport org.springframework.amqp.core.Binding;\nimport org.springframework.amqp.core.BindingBuilder;\nimport org.springframework.amqp.core.DirectExchange;\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class RabbitMQConfig {\n\n    @Value(\"${app.rabbitmq.queue}\")\n    private String queueName;\n\n    @Value(\"${app.rabbitmq.exchange}\")\n    private String exchangeName;\n\n    @Value(\"${app.rabbitmq.routingkey}\")\n    private String routingKey;\n\n    @Bean\n    Queue queue() {\n        // durable: true - la cola sobrevive a reinicios del broker\n        return new Queue(queueName, true);\n    }\n\n    @Bean\n    DirectExchange exchange() {\n        // DirectExchange: Enruta mensajes basados en la routing key exacta\n        return new DirectExchange(exchangeName);\n    }\n\n    @Bean\n    Binding binding(Queue queue, DirectExchange exchange) {\n        // Vincula la cola al exchange con la routing key especificada\n        return BindingBuilder.bind(queue).to(exchange).with(routingKey);\n    }\n}\n</code></pre> <ol> <li>Crea un Controlador REST para Enviar Mensajes:</li> </ol> <pre><code>package com.eci.arcn.producer_service.controller;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/messages\")\npublic class MessageController {\n\n    private static final Logger log = LoggerFactory.getLogger(MessageController.class);\n\n    @Autowired\n    private RabbitTemplate rabbitTemplate;\n\n    @Value(\"${app.rabbitmq.exchange}\")\n    private String exchangeName;\n\n    @Value(\"${app.rabbitmq.routingkey}\")\n    private String routingKey;\n\n    @PostMapping(\"/send\")\n    public String sendMessage(@RequestParam String message) {\n        log.info(\"Enviando mensaje: '{}' a exchange '{}' con routing key '{}'\", message, exchangeName, routingKey);\n        // Enviar el mensaje al exchange con la routing key definida\n        rabbitTemplate.convertAndSend(exchangeName, routingKey, message);\n        return \"Mensaje '\" + message + \"' enviado!\";\n    }\n}\n</code></pre> <ol> <li>Define el Dockerfile para el Productor:</li> </ol> <pre><code># producer-service/Dockerfile\n# Usa una imagen base de JRE ligera que coincida con tu JDK de compilaci\u00f3n\nFROM openjdk:17-jdk-slim\n\n# Argumento para el JAR (se pasa durante la construcci\u00f3n en docker-compose)\nARG JAR_FILE=target/*.jar\n\n# Establece el directorio de trabajo\nWORKDIR /app\n\n# Copia el JAR construido a la imagen\nCOPY ${JAR_FILE} app.jar\n\n# Expone el puerto de la aplicaci\u00f3n\nEXPOSE 8080\n\n# Comando para ejecutar la aplicaci\u00f3n\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n</code></pre>"},{"location":"event-driven-lab/#paso-3-crear-el-servicio-consumidor-spring-boot","title":"Paso 3: Crear el Servicio Consumidor (Spring Boot)","text":"<ol> <li> <p>Navega a la Carpeta Ra\u00edz en Codespaces: /workspaces/event-driven-lab.</p> </li> <li> <p>Crea el Proyecto Consumidor: Similar al productor.</p> </li> <li>Dependencias:<ul> <li>Spring for RabbitMQ (AMQP)</li> <li>Lombok (opcional)</li> <li>Nombre del Artefacto: consumer-service</li> <li>Grupo: com.eci.arcn</li> <li>Empaquetado: Jar</li> <li>Versi\u00f3n de Java: 17</li> </ul> </li> <li>Configura application.properties:</li> </ol> <pre><code>spring.application.name=consumer-service\n\n# consumer-service/src/main/resources/application.properties\n# No necesita puerto de servidor a menos que expongas una API REST propia\n# server.port=8081\n\n# Configuraci\u00f3n de RabbitMQ (igual que el productor)\nspring.rabbitmq.host=rabbitmq\nspring.rabbitmq.port=5672\nspring.rabbitmq.username=guest\nspring.rabbitmq.password=guest\n\n# Nombre de la cola a escuchar (debe coincidir con la del productor)\napp.rabbitmq.queue=messages.queue\n</code></pre> <ol> <li>Configura RabbitMQ (Solo la Cola es estrictamente necesaria para escuchar, pero declarar todo asegura idempotencia):</li> </ol> <pre><code>package com.eci.arcn.consumer_service.config;\n\nimport org.springframework.amqp.core.Queue;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class RabbitMQConfig {\n\n    @Value(\"${app.rabbitmq.queue}\")\n    private String queueName;\n\n    // Declarar la cola aqu\u00ed asegura que exista si el consumidor inicia primero.\n    // Es importante que los par\u00e1metros (nombre, durabilidad, etc.) coincidan\n    // con la declaraci\u00f3n en el productor.\n    @Bean\n    Queue queue() {\n        return new Queue(queueName, true); // Debe ser durable=true igual que en productor\n    }\n    // Nota: No es estrictamente necesario declarar el Exchange y Binding aqu\u00ed\n    // si el Productor ya lo hace, pero no hace da\u00f1o y aumenta la resiliencia.\n    // Si los declaras, aseg\u00farate que los nombres y tipos coincidan.\n}\n</code></pre> <ol> <li>Crea un Listener para Recibir Mensajes:</li> </ol> <pre><code>package com.eci.arcn.consumer_service.listener;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class MessageListener {\n\n    private static final Logger log = LoggerFactory.getLogger(MessageListener.class);\n\n    // Escucha en la cola definida en application.properties (a trav\u00e9s de la config)\n    @RabbitListener(queues = \"${app.rabbitmq.queue}\")\n    public void receiveMessage(String message) {\n        log.info(\"Mensaje recibido: '{}'\", message);\n        // Aqu\u00ed puedes a\u00f1adir la l\u00f3gica para procesar el mensaje\n        // Por ejemplo: guardar en base de datos, llamar a otra API, etc.\n        System.out.println(\"&gt;&gt;&gt; Mensaje Procesado: \" + message);\n    }\n}\n</code></pre> <ol> <li>Define el Dockerfile para el Consumidor:</li> </ol> <pre><code># consumer-service/Dockerfile\n# Usa una imagen base de JRE ligera\nFROM eclipse-temurin:17-jre-jammy\n\n# Argumento para el JAR\nARG JAR_FILE=target/*.jar\n\n# Directorio de trabajo\nWORKDIR /app\n\n# Copia el JAR\nCOPY ${JAR_FILE} app.jar\n\n# No necesita exponer puerto si solo consume mensajes\n# EXPOSE 8081\n\n# Comando de ejecuci\u00f3n\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"]\n</code></pre>"},{"location":"event-driven-lab/#paso-4-crear-y-subir-imagenes-a-docker-hub","title":"Paso 4: Crear y subir imagenes a Docker Hub","text":"<p>Realizar los siguientes pasos para el productor y el consumidor</p> <ol> <li>Generar paquete: <code>mvn package</code></li> <li>Construir imagen: <code>docker build -t &lt;Nombre-Microservice&gt; .</code></li> <li>Etiquetar imagen: <code>docker tag &lt;Nombre-Microservice&gt; &lt;tu-usuario&gt;/&lt;Nombre-Microservice&gt;</code></li> <li>Login en Docker Hub: <code>docker login -u &lt;tu-usuario&gt;</code></li> <li>Te pedira un password, para el cual debes generar un \"Personal Access Token\" en Docker Hub</li> <li>Sube la imagen a Docker Hub: <code>docker push &lt;tu-usuario&gt;/&lt;Nombre-Microservice&gt;</code></li> </ol>"},{"location":"event-driven-lab/#paso-5-docker-compose","title":"Paso 5: docker-compose","text":"<ol> <li>Navega a la Carpeta Ra\u00edz en Codespaces: Aseg\u00farate de estar en /workspaces/event-driven-lab en la terminal de Codespaces.</li> <li>Crea el archivo <code>docker-compose.yml</code></li> <li>Agrega el siguiente contenido:</li> </ol> <pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  # Servicio RabbitMQ\n  rabbitmq:\n    image: rabbitmq:management # Usa la imagen con la UI de gesti\u00f3n\n    container_name: rabbitmq\n    hostname: rabbitmq              # Nombre de host para que los servicios se conecten\n    ports:\n      - \"5672:5672\"   # Puerto AMQP\n      - \"15672:15672\" # Puerto UI de Gesti\u00f3n (accesible v\u00eda Play With Docker)\n    # volumes:\n    #   - rabbitmq_data:/var/lib/rabbitmq/ # Persistencia (opcional para PWD)\n    # environment:\n      # Puedes mantener los de por defecto (guest/guest) o definirlos\n      # RABBITMQ_DEFAULT_USER: user\n      # RABBITMQ_DEFAULT_PASS: password\n      # RABBITMQ_DEFAULT_VHOST: / # Virtual host por defecto\n    networks:\n      - event_network\n\n  # Servicio Productor\n  producer:\n    image: &lt;tudockerhubusername&gt;/producer-service\n    container_name: producer-service\n    ports:\n      - \"8080:8080\" # Expone el puerto del API REST del productor\n    depends_on:\n      - rabbitmq # Asegura que RabbitMQ inicie antes\n    environment:\n      # Sobrescribe la configuraci\u00f3n de application.properties para asegurar el host correcto\n      - SPRING_RABBITMQ_HOST=rabbitmq\n      - SPRING_RABBITMQ_PORT=5672\n      - SPRING_RABBITMQ_USERNAME=guest\n      - SPRING_RABBITMQ_PASSWORD=guest\n\n      # Opcional: A\u00f1adir perfiles de Spring, configuraciones de memoria, etc.\n      # - SPRING_PROFILES_ACTIVE=docker\n    networks:\n      - event_network\n\n  # Servicio Consumidor\n  consumer:\n    image: &lt;tudockerhubusername&gt;/consumer-service\n    container_name: consumer-service\n    depends_on:\n      - rabbitmq\n    environment:\n      - SPRING_RABBITMQ_HOST=rabbitmq\n      - SPRING_RABBITMQ_PORT=5672\n    networks:\n      - event_network\n    # restart: unless-stopped # Reinicia si falla (\u00fatil en producci\u00f3n)\n\n# Red para que los contenedores se comuniquen por nombre de servicio\nnetworks:\n  event_network:\n    driver: bridge\n\n# Volumen para persistencia de datos de RabbitMQ (opcional)\n# volumes:\n#   rabbitmq_data:\n</code></pre> <ul> <li>Aseg\u00farate de reemplazar tudockerhubusername con tu usuario.</li> <li>Guarda este archivo y s\u00fabelo a tu repositorio GitHub. (git add docker-compose.yml, git commit, git push).</li> </ul>"},{"location":"event-driven-lab/#paso-6-ejecutar-en-play-with-docker","title":"Paso 6: Ejecutar en Play with Docker","text":"<ol> <li>Ve a Play with Docker, inicia una sesi\u00f3n y a\u00f1ade una instancia.</li> <li>Clona tu repositorio:</li> </ol> <pre><code>git clone https://github.com/&lt;tu-usuario&gt;/event-driven-lab.git\ncd event-driven-lab/\n</code></pre> <ol> <li>Levanta los servicios:</li> </ol> <pre><code>docker-compose up -d\n</code></pre> <ol> <li> <p>Probar eventos</p> </li> <li> <p>Enviar mensaje desde producer</p> </li> </ol> <pre><code>curl -X POST \"http://localhost:8080/api/messages/send?message=HolaDesdePlayWithDocker\"\n</code></pre> <ul> <li> <p>Deber\u00edas recibir una respuesta como <code>Mensaje 'HolaDesdePlayWithDocker' enviado!</code></p> </li> <li> <p>Verifica el Consumidor: Revisa los logs del consumidor:</p> </li> </ul> <pre><code>docker-compose logs consumer-service\n</code></pre> <ul> <li> <p>Deber\u00edas ver la l\u00ednea <code>Mensaje recibido: 'HolaDesdePlayWithDocker'</code> y <code>&gt;&gt;&gt; Mensaje Procesado: HolaDesdePlayWithDocker</code>.</p> </li> <li> <p>Explora RabbitMQ Management UI (Opcional):</p> </li> <li>Haz clic en el bot\u00f3n azul del puerto 15672.</li> <li>Se abrir\u00e1 la interfaz web de RabbitMQ.</li> <li>Inicia sesi\u00f3n con guest / guest (o las credenciales que hayas configurado).</li> <li>Ve a la pesta\u00f1a \"Queues\", busca messages.queue. Podr\u00e1s ver si hay mensajes en cola, el ritmo de entrada/salida, etc.</li> </ul>"},{"location":"microservice-basics/","title":"Laboratorio: Creaci\u00f3n de un Microservicio \"Hello World\" con Spring Boot, Docker y Play with Docker","text":""},{"location":"microservice-basics/#introduccion","title":"Introducci\u00f3n","text":"<p>Este laboratorio te guiar\u00e1 a trav\u00e9s de los pasos necesarios para crear un microservicio b\u00e1sico \"Hello World\" utilizando Spring Boot, GitHub, GitHub Codespaces y Play with Docker.</p>"},{"location":"microservice-basics/#paso-1-configuracion-del-repositorio-en-github","title":"Paso 1: Configuraci\u00f3n del Repositorio en GitHub","text":"<ol> <li>Crear un Repositorio en GitHub:<ul> <li>Ve a GitHub y accede a tu cuenta.</li> <li>Haz clic en \"New\" para crear un nuevo repositorio.</li> <li>Asigna un nombre al repositorio, por ejemplo, <code>hello-world-microservice</code>.</li> <li>Inicializa el repositorio con un archivo README.</li> </ul> </li> </ol>"},{"location":"microservice-basics/#paso-2-configuracion-de-github-codespaces","title":"Paso 2: Configuraci\u00f3n de GitHub Codespaces","text":"<ol> <li>Crear un Codespace:<ul> <li>En la p\u00e1gina principal del repositorio, haz clic en el bot\u00f3n \"Code\" y selecciona \"Create codespace on main\".</li> <li>Esto abrir\u00e1 un entorno de desarrollo en la nube donde podr\u00e1s editar y ejecutar tu proyecto.</li> </ul> </li> </ol> <p>2. Configurar Codespace:     * Crear archivo con el nombre \".devcontainer/devcontainer.json\"     * Pegar la siguiente configuraci\u00f3n</p> <pre><code>    {\n        \"name\": \"Java Dev Environment\",\n        \"image\": \"mcr.microsoft.com/devcontainers/java:1-21\",\n\n        \"features\": {\n        \"ghcr.io/devcontainers/features/java:1\": {\n            \"version\": \"none\",\n            \"installMaven\": \"true\",\n            \"mavenVersion\": \"3.8.6\",\n            \"installGradle\": \"false\"\n            },\n        \"ghcr.io/devcontainers/features/docker-in-docker:1\": {}\n        },\n        \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"vscjava.vscode-java-pack\",\n                \"streetsidesoftware.code-spell-checker\",\n                \"pivotal.vscode-spring-boot\",\n                \"vmware.vscode-boot-dev-pack\"\n            ]\n        }\n        },\n        \"postCreateCommand\": \"mvn clean install\"\n    }\n</code></pre> <ol> <li>Asegurate de la instalaci\u00f3n de Java y Maven:<ul> <li>java -version</li> <li>mvn -version</li> </ul> </li> </ol>"},{"location":"microservice-basics/#paso-3-configuracion-del-proyecto-spring-boot","title":"Paso 3: Configuraci\u00f3n del Proyecto Spring Boot","text":"<ol> <li>Generar el Proyecto Spring Boot:<ul> <li>Verifica, que se tenga la extensi\u00f3n de Spring Boot Extension Pack </li> <li>Dirigite a la barra Command Palette Ctrl+Shift+P</li> <li>Buscar y seleccionar Spring Initializr: Create a Maven Project </li> <li>Configura el proyecto con las siguientes opciones:<ul> <li>Language: Java</li> <li>Spring Boot: \u00daltima versi\u00f3n estable</li> <li>Group: com.eci.arcn</li> <li>Artifact: microservice-helloworld</li> <li>Name: microservice-helloworld</li> <li>Packaging: Jar</li> <li>Java Version: 17</li> </ul> </li> <li>Agrega la dependencia <code>Spring Web</code>.</li> <li>Haz clic en \"Generate\" para descargar el proyecto.</li> <li>Nota: una vez creado el proyecto, asegurate de mover los archivos a la raiz del workspace</li> </ul> </li> </ol>"},{"location":"microservice-basics/#paso-4-implementacion-del-servicio-hello-world","title":"Paso 4: Implementaci\u00f3n del Servicio \"Hello World\"","text":"<ol> <li>Crear el Controlador:<ul> <li>En GitHub Codespaces, navega a <code>src/main/java/com/eci/arcn/microservice-helloworld</code>.</li> <li>Crea una nueva clase llamada <code>HelloWorldController.java</code> con el siguiente contenido:</li> </ul> </li> </ol> <pre><code>\n    package com.eci.arcn.helloworld;\n\n    import org.springframework.web.bind.annotation.GetMapping;\n    import org.springframework.web.bind.annotation.RestController;\n\n    @RestController\n    public class HelloWorldController {\n\n        @GetMapping(\"/hello\")\n        public String hello() {\n            return \"Hello, World!\";\n        }\n    }\n</code></pre> <ol> <li> <p>Configurar la Aplicaci\u00f3n:</p> <ul> <li>Aseg\u00farate de que la clase principal del proyecto est\u00e9 anotada con <code>@SpringBootApplication</code>.</li> </ul> </li> <li> <p>Ejecutar la Aplicaci\u00f3n:</p> <ul> <li>Utiliza el terminal integrado en Codespaces para ejecutar tu aplicaci\u00f3n con el comando:</li> </ul> <p><code>bash     mvn spring-boot:run</code></p> <ul> <li>Verifica que la aplicaci\u00f3n se ejecute correctamente y est\u00e9 accesible ejecutando</li> </ul> <p><code>bash     curl http://localhost:8080/hello</code></p> </li> </ol>"},{"location":"microservice-basics/#paso-5-crear-y-subir-la-imagen-docker","title":"Paso 5: Crear y Subir la Imagen Docker","text":"<ol> <li> <p>Crear el Dockerfile:</p> <ul> <li>En la ra\u00edz del proyecto, crea un archivo llamado <code>Dockerfile</code> con el siguiente contenido:</li> </ul> <p><code>dockerfile     FROM openjdk:17-jdk-slim     COPY target/microservice-helloworld.jar microservice-helloworld.jar     ENTRYPOINT [\"java\", \"-jar\", \"/microservice-helloworld.jar\"]</code></p> </li> <li> <p>Construir la Imagen Docker:</p> <ul> <li>Ejecuta el siguiente comando para compilar el proyecto y generar el archivo JAR: <code>bash     mvn clean package</code></li> <li>Construye la imagen Docker con el comando: <code>bash     docker build -t microservice-helloworld .</code></li> </ul> </li> <li> <p>Subir la Imagen a Docker Hub:</p> <ul> <li>Asegurate de tener/crear cuenta en Docker Hub</li> <li>Etiqueta la imagen con tu nombre de usuario de Docker Hub:</li> </ul> <p><code>bash     docker tag microservice-helloworld &lt;tu-usuario&gt;/microservice-helloworld</code></p> <ul> <li>Inicia sesi\u00f3n en Docker Hub:<ul> <li>Github codespace, genera un login del space a Docker Hub, por tanto debes desloguear primero</li> </ul> </li> </ul> <p><code>bash     docker logout</code></p> <ul> <li>Una vez deslogueado, loguearse con el usuario de Docker Hub</li> </ul> <p><code>bash     docker login -u &lt;tu-usuario&gt;</code></p> <ul> <li>Te pedira un password, para el cual debes generar un \"Personal Access Token\" en Docker Hub</li> <li>Sube la imagen a Docker Hub:</li> </ul> <p><code>bash     docker push &lt;tu-usuario&gt;/microservice-helloworld</code></p> </li> </ol>"},{"location":"microservice-basics/#paso-6-ejecutar-el-servicio-en-play-with-docker","title":"Paso 6: Ejecutar el Servicio en Play with Docker","text":"<ol> <li> <p>Acceder a Play with Docker:</p> <ul> <li>Ve a Play with Docker y accede con tu cuenta de Docker Hub.</li> </ul> </li> <li> <p>Crear una Instancia:</p> <ul> <li>Haz clic en \"Start\" para crear una nueva instancia de Docker.</li> </ul> </li> <li> <p>Ejecutar el Contenedor:</p> <ul> <li>En Play with Docker, ejecuta el contenedor con el siguiente comando:</li> </ul> <p><code>bash     docker run -p 8080:8080 &lt;tu-usuario&gt;/microservice-helloworld</code></p> <ul> <li>Accede al servicio desde el enlace proporcionado por Play with Docker, a\u00f1adiendo <code>/hello</code> al final de la URL para ver el mensaje \"Hello, World!\".</li> </ul> </li> </ol>"},{"location":"quizXP/","title":"Quiz de eXtreme Programming (XP)","text":""},{"location":"solid/","title":"Laboratorio de Principios SOLID en Java","text":"<p>Este laboratorio tiene como objetivo que los estudiantes refactoricen c\u00f3digo que viola los principios SOLID y apliquen las mejores pr\u00e1cticas.</p>"},{"location":"solid/#requisitos-previos","title":"Requisitos Previos","text":"<ul> <li>Java 17+</li> <li>Maven</li> <li>GitHub Codespaces</li> <li>JUnit 5 para pruebas</li> </ul>"},{"location":"solid/#creacion-del-repositorio-en-github","title":"Creaci\u00f3n del Repositorio en GitHub","text":"<ol> <li>Crear un nuevo repositorio:</li> <li>Ve a GitHub.</li> <li>Haz clic en el bot\u00f3n \"New repository\".</li> <li>Asigna un nombre, por ejemplo, <code>solid-principles-java-lab</code>.</li> <li>Selecciona \"Public\" o \"Private\" seg\u00fan prefieras.</li> <li>Inicializa el repositorio con un archivo <code>README.md</code>.</li> <li>Haz clic en \"Create repository\".</li> </ol>"},{"location":"solid/#creacion-del-proyecto-maven","title":"Creaci\u00f3n del Proyecto Maven","text":"<p>Para desarrollar el laboratorio, primero debemos crear un proyecto Maven. En GitHub Codespaces, ejecuta el siguiente comando en la terminal:</p> <pre><code>mvn archetype:generate -DgroupId=com.example.solid -DartifactId=solid-principles-java-lab -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n</code></pre> <p>Este comando generar\u00e1 la estructura b\u00e1sica del proyecto con las carpetas <code>src/main/java</code> y <code>src/test/java</code>.</p> <p>Luego, navega al directorio del proyecto:</p> <pre><code>cd solid-principles-java-lab\n</code></pre> <p>Ahora puedes continuar con la configuraci\u00f3n del entorno.</p>"},{"location":"solid/#configuracion-del-pomxml","title":"Configuraci\u00f3n del POM.xml","text":"<p>Para asegurar la compatibilidad con Java 17, actualiza el archivo <code>pom.xml</code> con la siguiente configuraci\u00f3n:</p> <pre><code>&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n\n    &lt;groupId&gt;com.example.solid&lt;/groupId&gt;\n    &lt;artifactId&gt;solid-principles-java-lab&lt;/artifactId&gt;\n    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;\n\n    &lt;properties&gt;\n        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;\n        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;\n            &lt;version&gt;5.7.1&lt;/version&gt;\n            &lt;scope&gt;test&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;\n            &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;\n            &lt;version&gt;5.7.1&lt;/version&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n&lt;/project&gt;\n</code></pre> <p>Ahora puedes continuar con la configuraci\u00f3n del entorno.</p>"},{"location":"solid/#configuracion-en-github-codespaces","title":"Configuraci\u00f3n en GitHub Codespaces","text":"<p>Para desarrollar el laboratorio en GitHub Codespaces, sigue estos pasos:</p> <ol> <li> <p>Habilitar Codespaces en el repositorio:</p> </li> <li> <p>Ve a tu repositorio en GitHub.</p> </li> <li>Haz clic en el bot\u00f3n \"Code\" y selecciona \"Codespaces\".</li> <li> <p>Crea un nuevo Codespace.</p> </li> <li> <p>Configurar el entorno de desarrollo:</p> </li> <li> <p>Aseg\u00farate de que <code>Java 17</code> y <code>Maven</code> est\u00e9n instalados.</p> </li> <li>Puedes definir un archivo <code>.devcontainer/devcontainer.json</code> para personalizar el entorno:</li> </ol> <pre><code>{\n  \"image\": \"mcr.microsoft.com/devcontainers/java:17\",\n  \"features\": {\n    \"ghcr.io/devcontainers/features/java:1\": {\n      \"version\": \"17\"\n    }\n  },\n  \"postCreateCommand\": \"sudo apt update &amp;&amp; sudo apt install -y maven &amp;&amp; mvn clean install\"\n}\n</code></pre> <ol> <li>Compilar y ejecutar pruebas:</li> <li>Usa el siguiente comando para compilar el c\u00f3digo y ejecutar pruebas:      <code>sh      mvn test</code></li> </ol>"},{"location":"solid/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<pre><code>solid-principles-java-lab/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/java/com/example/solid/\n\u2502   \u2502   \u251c\u2500\u2500 srp/  (Single Responsibility Principle)\n\u2502   \u2502   \u251c\u2500\u2500 ocp/  (Open/Closed Principle)\n\u2502   \u2502   \u251c\u2500\u2500 lsp/  (Liskov Substitution Principle)\n\u2502   \u2502   \u251c\u2500\u2500 isp/  (Interface Segregation Principle)\n\u2502   \u2502   \u251c\u2500\u2500 dip/  (Dependency Inversion Principle)\n\u2502   \u251c\u2500\u2500 test/java/com/example/solid/  (Pruebas unitarias)\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 README.md\n</code></pre>"},{"location":"solid/#ejercicios","title":"Ejercicios","text":""},{"location":"solid/#1-single-responsibility-principle-srp","title":"1. Single Responsibility Principle (SRP)","text":"<p>Problema: La clase <code>Invoice</code> tiene m\u00faltiples responsabilidades.</p> <pre><code>public class Invoice {\n    private String customer;\n    private double amount;\n\n    public Invoice(String customer, double amount) {\n        this.customer = customer;\n        this.amount = amount;\n    }\n\n    public double calculateTotal() {\n        return amount * 1.21;\n    }\n\n    public void printInvoice() {\n        System.out.println(\"Factura para: \" + customer);\n        System.out.println(\"Total: \" + calculateTotal());\n    }\n\n    public void saveToDatabase() {\n        System.out.println(\"Guardando factura...\");\n    }\n}\n</code></pre> <p>Tarea: Refactoriza separando la l\u00f3gica en diferentes clases.</p>"},{"location":"solid/#2-openclosed-principle-ocp","title":"2. Open/Closed Principle (OCP)","text":"<p>Problema: La clase <code>DiscountCalculator</code> no es extensible sin modificar su c\u00f3digo.</p> <pre><code>public class DiscountCalculator {\n    public double calculateDiscount(String customerType, double price) {\n        if (customerType.equals(\"Regular\")) {\n            return price * 0.10;\n        } else if (customerType.equals(\"VIP\")) {\n            return price * 0.20;\n        }\n        return 0;\n    }\n}\n</code></pre> <p>Tarea: Aplica OCP creando una interfaz <code>DiscountStrategy</code>.</p>"},{"location":"solid/#3-liskov-substitution-principle-lsp","title":"3. Liskov Substitution Principle (LSP)","text":"<p>Problema: <code>ElectricCar</code> no puede usar <code>refuel()</code>.</p> <pre><code>public class Car {\n    public void drive() {\n        System.out.println(\"Conduciendo...\");\n    }\n\n    public void refuel() {\n        System.out.println(\"Repostando...\");\n    }\n}\n\nclass ElectricCar extends Car {\n    @Override\n    public void refuel() {\n        throw new UnsupportedOperationException(\"Los coches el\u00e9ctricos no usan combustible.\");\n    }\n}\n</code></pre> <p>Tarea: Separa los m\u00e9todos en interfaces espec\u00edficas.</p>"},{"location":"solid/#4-interface-segregation-principle-isp","title":"4. Interface Segregation Principle (ISP)","text":"<p>Problema: La interfaz <code>Worker</code> obliga a los desarrolladores a implementar m\u00e9todos innecesarios.</p> <pre><code>public interface Worker {\n    void work();\n    void eat();\n}\n\nclass Developer implements Worker {\n    @Override\n    public void work() {\n        System.out.println(\"Escribiendo c\u00f3digo...\");\n    }\n\n    @Override\n    public void eat() {\n        throw new UnsupportedOperationException(\"Sin horario fijo de almuerzo.\");\n    }\n}\n</code></pre> <p>Tarea: Divide la interfaz en <code>Workable</code> y <code>Eatable</code>.</p>"},{"location":"solid/#5-dependency-inversion-principle-dip","title":"5. Dependency Inversion Principle (DIP)","text":"<p>Problema: <code>OrderProcessor</code> depende directamente de <code>MySQLDatabase</code>.</p> <pre><code>public class MySQLDatabase {\n    public void saveOrder() {\n        System.out.println(\"Guardando pedido en MySQL...\");\n    }\n}\n\nclass OrderProcessor {\n    private MySQLDatabase database;\n\n    public OrderProcessor() {\n        this.database = new MySQLDatabase();\n    }\n\n    public void processOrder() {\n        System.out.println(\"Procesando pedido...\");\n        database.saveOrder();\n    }\n}\n</code></pre> <p>Tarea: Crea una interfaz <code>Database</code> e inyecta una implementaci\u00f3n concreta.</p>"},{"location":"solid/#como-entregar-las-soluciones","title":"\u00bfC\u00f3mo entregar las soluciones?","text":"<ol> <li>Cada estudiante/grupo debe crear una versi\u00f3n refactorizada en <code>GoodExample.java</code> dentro de cada carpeta (<code>srp/</code>, <code>ocp/</code>, etc.), aplicando SOLID correctamente.</li> <li>Se debe realizar UT en cada caso y/o principio.</li> <li>Generar un Readme en el que se indique nombres de los integrantes del grupo y patrones de dise\u00f1o que se pueden implementar en los retos.</li> <li>Se debe contemplar el trabajo colaborativo (Todos deben tener un cambio con su usuario en el repositorio).</li> <li>Se debe establecer una estrategia para exponer el ejercicio en el que cada integrante participe. </li> </ol>"},{"location":"tdd/","title":"Laboratorio: TDD con FizzBuzz en GitHub Codespaces","text":""},{"location":"tdd/#objetivo","title":"Objetivo","text":"<p>Aplicar la metodolog\u00eda de Desarrollo Guiado por Pruebas (TDD) mediante la implementaci\u00f3n del ejercicio cl\u00e1sico FizzBuzz en Java dentro de GitHub Codespaces.</p>"},{"location":"tdd/#requisitos-previos","title":"Requisitos Previos","text":"<ul> <li>Cuenta en GitHub.</li> <li>Repositorio habilitado con GitHub Codespaces.</li> <li>Conocimientos b\u00e1sicos de Java.</li> <li>Familiaridad con TDD y JUnit.</li> </ul>"},{"location":"tdd/#configuracion-del-entorno","title":"Configuraci\u00f3n del Entorno","text":"<ol> <li>Clonar el repositorio en GitHub Codespaces:</li> <li>Abre tu repositorio en GitHub.</li> <li>Haz clic en el bot\u00f3n <code>Code</code> y selecciona <code>Codespaces</code>.</li> <li> <p>Inicia un nuevo Codespace o selecciona uno existente.</p> </li> <li> <p>Configurar el entorno de desarrollo:</p> </li> <li>Abre la terminal en Codespaces y ejecuta:      <code>bash      mkdir -p src/main/java src/test/java      touch src/main/java/FizzBuzz.java src/test/java/FizzBuzzTest.java</code></li> <li>Agrega un archivo <code>pom.xml</code> para configurar Maven y JUnit.</li> </ol>"},{"location":"tdd/#paso-1-escribir-la-primera-prueba","title":"Paso 1: Escribir la primera prueba","text":"<p>Crea el archivo <code>src/test/java/FizzBuzzTest.java</code> y agrega la siguiente prueba inicial:</p> <pre><code>import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\nclass FizzBuzzTest {\n    @Test\n    void testFizzBuzzReturnsNumber() {\n        assertEquals(\"1\", FizzBuzz.fizzbuzz(1));\n    }\n}\n</code></pre>"},{"location":"tdd/#paso-2-implementar-la-funcion-minima","title":"Paso 2: Implementar la funci\u00f3n m\u00ednima","text":"<p>Crea el archivo <code>src/main/java/FizzBuzz.java</code> y define la funci\u00f3n:</p> <pre><code>public class FizzBuzz {\n    public static String fizzbuzz(int n) {\n        return String.valueOf(n);\n    }\n}\n</code></pre> <p>Ejecuta las pruebas con:</p> <pre><code>mvn test\n</code></pre>"},{"location":"tdd/#paso-3-agregar-mas-pruebas-y-logica","title":"Paso 3: Agregar m\u00e1s pruebas y l\u00f3gica","text":"<p>A\u00f1adir pruebas para los casos de m\u00faltiplos de 3 y 5 en <code>FizzBuzzTest.java</code>:</p> <pre><code>@Test\nvoid testFizzBuzzMultiplo3() {\n    assertEquals(\"Fizz\", FizzBuzz.fizzbuzz(3));\n}\n\n@Test\nvoid testFizzBuzzMultiplo5() {\n    assertEquals(\"Buzz\", FizzBuzz.fizzbuzz(5));\n}\n\n@Test\nvoid testFizzBuzzMultiplo3y5() {\n    assertEquals(\"FizzBuzz\", FizzBuzz.fizzbuzz(15));\n}\n</code></pre> <p>Modifica <code>FizzBuzz.java</code> para pasar estas pruebas:</p>"},{"location":"tdd/#paso-4-ejecutar-y-validar-las-pruebas","title":"Paso 4: Ejecutar y validar las pruebas","text":"<p>Corre nuevamente <code>mvn test</code> y verifica que todas las pruebas pasen.</p>"},{"location":"tdd/#conclusion","title":"Conclusi\u00f3n","text":"<p>Has aplicado TDD para desarrollar la funci\u00f3n FizzBuzz. Sigue esta metodolog\u00eda para otros problemas y mejorar\u00e1s la calidad de tu c\u00f3digo.</p>"},{"location":"tdd/#siguientes-pasos","title":"Siguientes Pasos","text":"<ul> <li>Implementar pruebas adicionales.</li> <li>Refactorizar el c\u00f3digo para mejorar su claridad.</li> <li>Integrar este flujo en un pipeline CI/CD en GitHub Actions.</li> </ul>"}]}